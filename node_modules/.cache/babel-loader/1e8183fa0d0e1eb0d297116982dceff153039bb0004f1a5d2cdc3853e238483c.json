{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport connectToParent from 'penpal/lib/connectToParent';\nimport { isOnBootParent, isRenderAssetSourceParent, isRenderConfigScreenParent, isRenderFieldExtensionParent, isRenderItemFormOutletParent, isRenderManualFieldExtensionConfigScreenParent, isRenderModalParent, isRenderPageParent, isRenderSidebarPanelParent, isRenderSidebarParent } from './guards';\nfunction toMultifield(fn) {\n  return function (fields, ctx) {\n    if (!fn) {\n      return {};\n    }\n    var result = {};\n    for (var _i = 0, fields_1 = fields; _i < fields_1.length; _i++) {\n      var field = fields_1[_i];\n      var itemType = ctx.itemTypes[field.relationships.item_type.data.id];\n      result[field.id] = fn(field, __assign(__assign({}, ctx), {\n        itemType: itemType\n      }));\n    }\n    return result;\n  };\n}\nfunction getMaxScrollHeight() {\n  var elements = document.querySelectorAll('body *');\n  var maxVal = 0;\n  for (var i = 0; i < elements.length; i++) {\n    maxVal = Math.max(elements[i].getBoundingClientRect().bottom, maxVal);\n  }\n  return maxVal;\n}\nvar buildRenderUtils = function (parent) {\n  var oldHeight = null;\n  var updateHeight = function (height) {\n    var realHeight = height === undefined ? Math.max(document.body.scrollHeight, document.body.offsetHeight, document.documentElement.getBoundingClientRect().height, getMaxScrollHeight()) : height;\n    if (realHeight !== oldHeight) {\n      parent.setHeight(realHeight);\n      oldHeight = realHeight;\n    }\n  };\n  var resizeObserver = null;\n  var mutationObserver = null;\n  var onMutation = function () {\n    return updateHeight();\n  };\n  var startAutoResizer = function () {\n    updateHeight();\n    if (!resizeObserver) {\n      resizeObserver = new ResizeObserver(onMutation);\n      resizeObserver.observe(document.documentElement);\n    }\n    if (!mutationObserver) {\n      mutationObserver = new MutationObserver(onMutation);\n      mutationObserver.observe(window.document.body, {\n        attributes: true,\n        childList: true,\n        subtree: true,\n        characterData: true\n      });\n    }\n  };\n  var stopAutoResizer = function () {\n    if (resizeObserver) {\n      resizeObserver.disconnect();\n      resizeObserver = null;\n    }\n    if (mutationObserver) {\n      mutationObserver.disconnect();\n      mutationObserver = null;\n    }\n  };\n  return {\n    updateHeight: updateHeight,\n    startAutoResizer: startAutoResizer,\n    stopAutoResizer: stopAutoResizer\n  };\n};\nexport function connect(configuration) {\n  if (configuration === void 0) {\n    configuration = {};\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var assetSources, mainNavigationTabs, settingsAreaSidebarItemGroups, contentAreaSidebarItems, manualFieldExtensions, itemFormSidebarPanels, itemFormSidebars, itemFormOutlets, listener, callMethodMergingBootCtxExecutor, penpalConnection, parent, initialSettings, currentSettings_1, render, renderUtils_1, render, renderUtils_2, render, renderUtils_3, render, renderUtils_4, render, renderUtils_5, render, renderUtils_6, render, renderUtils_7, render, renderUtils_8, render;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          assetSources = configuration.assetSources, mainNavigationTabs = configuration.mainNavigationTabs, settingsAreaSidebarItemGroups = configuration.settingsAreaSidebarItemGroups, contentAreaSidebarItems = configuration.contentAreaSidebarItems, manualFieldExtensions = configuration.manualFieldExtensions, itemFormSidebarPanels = configuration.itemFormSidebarPanels, itemFormSidebars = configuration.itemFormSidebars, itemFormOutlets = configuration.itemFormOutlets;\n          listener = null;\n          callMethodMergingBootCtxExecutor = null;\n          penpalConnection = connectToParent({\n            methods: {\n              sdkVersion: function () {\n                return '0.2.0';\n              },\n              implementedHooks: function () {\n                return Object.fromEntries(Object.entries(configuration).map(function (_a) {\n                  var key = _a[0],\n                    value = _a[1];\n                  if (typeof value === 'function') {\n                    return [key, true];\n                  }\n                  return [key, value];\n                }));\n              },\n              assetSources: assetSources,\n              mainNavigationTabs: mainNavigationTabs,\n              settingsAreaSidebarItemGroups: settingsAreaSidebarItemGroups,\n              contentAreaSidebarItems: contentAreaSidebarItems,\n              manualFieldExtensions: manualFieldExtensions,\n              itemFormSidebarPanels: itemFormSidebarPanels,\n              itemFormSidebars: itemFormSidebars,\n              itemFormOutlets: itemFormOutlets,\n              overrideFieldExtensions: toMultifield(configuration.overrideFieldExtensions),\n              customMarksForStructuredTextField: toMultifield(configuration.customMarksForStructuredTextField),\n              customBlockStylesForStructuredTextField: toMultifield(configuration.customBlockStylesForStructuredTextField),\n              onChange: function (newSettings) {\n                if (listener) {\n                  listener(newSettings);\n                }\n              },\n              callMethodMergingBootCtx: function (methodName, methodArgs, extraCtx) {\n                if (!callMethodMergingBootCtxExecutor) {\n                  return null;\n                }\n                return callMethodMergingBootCtxExecutor(methodName, methodArgs, extraCtx);\n              }\n            }\n          });\n          return [4 /*yield*/, penpalConnection.promise];\n        case 1:\n          parent = _a.sent();\n          return [4 /*yield*/, parent.getSettings()];\n        case 2:\n          initialSettings = _a.sent();\n          if (isOnBootParent(parent, initialSettings)) {\n            currentSettings_1 = initialSettings;\n            listener = function (newSettings) {\n              currentSettings_1 = newSettings;\n            };\n            callMethodMergingBootCtxExecutor = function (methodName, methodArgs, extraCtx) {\n              var _a;\n              if (!(methodName in configuration)) {\n                return undefined;\n              }\n              return (_a = configuration)[methodName].apply(_a, __spreadArray(__spreadArray([], methodArgs, false), [__assign(__assign(__assign({}, parent), currentSettings_1), extraCtx)], false));\n            };\n            if (configuration.onBoot) {\n              configuration.onBoot(__assign(__assign({}, parent), currentSettings_1));\n            }\n          }\n          if (isRenderPageParent(parent, initialSettings)) {\n            render = function (settings) {\n              if (!configuration.renderPage) {\n                return;\n              }\n              configuration.renderPage(settings.pageId, __assign(__assign({}, parent), settings));\n            };\n            listener = render;\n            render(initialSettings);\n          }\n          if (isRenderConfigScreenParent(parent, initialSettings)) {\n            renderUtils_1 = buildRenderUtils(parent);\n            render = function (settings) {\n              if (!configuration.renderConfigScreen) {\n                return;\n              }\n              configuration.renderConfigScreen(__assign(__assign(__assign({}, parent), settings), renderUtils_1));\n            };\n            listener = render;\n            render(initialSettings);\n          }\n          if (isRenderModalParent(parent, initialSettings)) {\n            renderUtils_2 = buildRenderUtils(parent);\n            render = function (settings) {\n              if (!configuration.renderModal) {\n                return;\n              }\n              configuration.renderModal(settings.modalId, __assign(__assign(__assign({}, parent), settings), renderUtils_2));\n            };\n            listener = render;\n            render(initialSettings);\n          }\n          if (isRenderAssetSourceParent(parent, initialSettings)) {\n            renderUtils_3 = buildRenderUtils(parent);\n            render = function (settings) {\n              if (!configuration.renderAssetSource) {\n                return;\n              }\n              configuration.renderAssetSource(settings.assetSourceId, __assign(__assign(__assign({}, parent), settings), renderUtils_3));\n            };\n            listener = render;\n            render(initialSettings);\n          }\n          if (isRenderSidebarPanelParent(parent, initialSettings)) {\n            renderUtils_4 = buildRenderUtils(parent);\n            render = function (settings) {\n              if (!configuration.renderItemFormSidebarPanel) {\n                return;\n              }\n              configuration.renderItemFormSidebarPanel(settings.sidebarPaneId, __assign(__assign(__assign({}, parent), settings), renderUtils_4));\n            };\n            listener = render;\n            render(initialSettings);\n          }\n          if (isRenderSidebarParent(parent, initialSettings)) {\n            renderUtils_5 = buildRenderUtils(parent);\n            render = function (settings) {\n              if (!configuration.renderItemFormSidebar) {\n                return;\n              }\n              configuration.renderItemFormSidebar(settings.sidebarId, __assign(__assign(__assign({}, parent), settings), renderUtils_5));\n            };\n            listener = render;\n            render(initialSettings);\n          }\n          if (isRenderItemFormOutletParent(parent, initialSettings)) {\n            renderUtils_6 = buildRenderUtils(parent);\n            render = function (settings) {\n              if (!configuration.renderItemFormOutlet) {\n                return;\n              }\n              configuration.renderItemFormOutlet(settings.itemFormOutletId, __assign(__assign(__assign({}, parent), settings), renderUtils_6));\n            };\n            listener = render;\n            render(initialSettings);\n          }\n          if (isRenderFieldExtensionParent(parent, initialSettings)) {\n            renderUtils_7 = buildRenderUtils(parent);\n            render = function (settings) {\n              if (!configuration.renderFieldExtension) {\n                return;\n              }\n              configuration.renderFieldExtension(settings.fieldExtensionId, __assign(__assign(__assign({}, parent), settings), renderUtils_7));\n            };\n            listener = render;\n            render(initialSettings);\n          }\n          if (isRenderManualFieldExtensionConfigScreenParent(parent, initialSettings)) {\n            renderUtils_8 = buildRenderUtils(parent);\n            render = function (settings) {\n              if (!configuration.renderManualFieldExtensionConfigScreen) {\n                return;\n              }\n              configuration.renderManualFieldExtensionConfigScreen(settings.fieldExtensionId, __assign(__assign(__assign({}, parent), settings), renderUtils_8));\n            };\n            listener = render;\n            render(initialSettings);\n          }\n          return [2 /*return*/];\n      }\n    });\n  });\n}","map":{"version":3,"names":["connectToParent","isOnBootParent","isRenderAssetSourceParent","isRenderConfigScreenParent","isRenderFieldExtensionParent","isRenderItemFormOutletParent","isRenderManualFieldExtensionConfigScreenParent","isRenderModalParent","isRenderPageParent","isRenderSidebarPanelParent","isRenderSidebarParent","toMultifield","fn","fields","ctx","result","_i","fields_1","length","field","itemType","itemTypes","relationships","item_type","data","id","__assign","getMaxScrollHeight","elements","document","querySelectorAll","maxVal","i","Math","max","getBoundingClientRect","bottom","buildRenderUtils","parent","oldHeight","updateHeight","height","realHeight","undefined","body","scrollHeight","offsetHeight","documentElement","setHeight","resizeObserver","mutationObserver","onMutation","startAutoResizer","ResizeObserver","observe","MutationObserver","window","attributes","childList","subtree","characterData","stopAutoResizer","disconnect","connect","configuration","assetSources","mainNavigationTabs","settingsAreaSidebarItemGroups","contentAreaSidebarItems","manualFieldExtensions","itemFormSidebarPanels","itemFormSidebars","itemFormOutlets","listener","callMethodMergingBootCtxExecutor","penpalConnection","methods","sdkVersion","implementedHooks","Object","fromEntries","entries","map","_a","key","value","overrideFieldExtensions","customMarksForStructuredTextField","customBlockStylesForStructuredTextField","onChange","newSettings","callMethodMergingBootCtx","methodName","methodArgs","extraCtx","promise","sent","getSettings","initialSettings","currentSettings_1","apply","__spreadArray","onBoot","render","settings","renderPage","pageId","renderUtils_1","renderConfigScreen","renderUtils_2","renderModal","modalId","renderUtils_3","renderAssetSource","assetSourceId","renderUtils_4","renderItemFormSidebarPanel","sidebarPaneId","renderUtils_5","renderItemFormSidebar","sidebarId","renderUtils_6","renderItemFormOutlet","itemFormOutletId","renderUtils_7","renderFieldExtension","fieldExtensionId","renderUtils_8","renderManualFieldExtensionConfigScreen"],"sources":["/Users/fabienpicard/Projects/astro-website/node_modules/datocms-plugin-sdk/src/connect.ts"],"sourcesContent":["import type { SchemaTypes } from '@datocms/cma-client';\nimport connectToParent from 'penpal/lib/connectToParent';\nimport type {\n  ItemFormOutlet,\n  RenderItemFormOutletMethods,\n  RenderItemFormOutletPropertiesAndMethods,\n  StructuredTextCustomBlockStyle,\n  StructuredTextCustomMark,\n} from '.';\nimport {\n  type Parent,\n  isOnBootParent,\n  isRenderAssetSourceParent,\n  isRenderConfigScreenParent,\n  isRenderFieldExtensionParent,\n  isRenderItemFormOutletParent,\n  isRenderManualFieldExtensionConfigScreenParent,\n  isRenderModalParent,\n  isRenderPageParent,\n  isRenderSidebarPanelParent,\n  isRenderSidebarParent,\n} from './guards';\nimport type {\n  AssetSource,\n  ContentAreaSidebarItem,\n  FieldExtensionOverride,\n  InitPropertiesAndMethods,\n  InitialLocationQueryForItemSelector,\n  ItemFormSidebar,\n  ItemFormSidebarPanel,\n  ItemPresentationInfo,\n  MainNavigationTab,\n  ManualFieldExtension,\n  OnBootMethods,\n  OnBootPropertiesAndMethods,\n  RenderAssetSourceMethods,\n  RenderAssetSourcePropertiesAndMethods,\n  RenderConfigScreenMethods,\n  RenderConfigScreenPropertiesAndMethods,\n  RenderFieldExtensionMethods,\n  RenderFieldExtensionPropertiesAndMethods,\n  RenderManualFieldExtensionConfigScreenMethods,\n  RenderManualFieldExtensionConfigScreenPropertiesAndMethods,\n  RenderModalMethods,\n  RenderModalPropertiesAndMethods,\n  RenderPageMethods,\n  RenderPagePropertiesAndMethods,\n  RenderSidebarMethods,\n  RenderSidebarPanelMethods,\n  RenderSidebarPanelPropertiesAndMethods,\n  RenderSidebarPropertiesAndMethods,\n  SettingsAreaSidebarItemGroup,\n} from './types';\n\ntype Field = SchemaTypes.Field;\ntype Item = SchemaTypes.Item;\ntype ItemCreateSchema = SchemaTypes.ItemCreateSchema;\ntype ItemType = SchemaTypes.ItemType;\ntype ItemUpdateSchema = SchemaTypes.ItemUpdateSchema;\n\nexport type SizingUtilities = {\n  /**\n   * Listens for DOM changes and automatically calls `setHeight` when it detects\n   * a change. If you're using `datocms-react-ui` package, the `<Canvas />`\n   * component already takes care of calling this method for you.\n   */\n  startAutoResizer: () => void;\n  /** Stops resizing the iframe automatically */\n  stopAutoResizer: () => void;\n  /**\n   * Triggers a change in the size of the iframe. If you don't explicitely pass\n   * a `newHeight` it will be automatically calculated using the iframe content\n   * at the moment\n   */\n  updateHeight: (newHeight?: number) => void;\n};\n\nexport type { Field, ItemType };\n\nexport type IntentCtx = InitPropertiesAndMethods;\nexport type OnBootCtx = OnBootPropertiesAndMethods;\nexport type FieldIntentCtx = InitPropertiesAndMethods & {\n  itemType: ItemType;\n};\nexport type RenderPageCtx = RenderPagePropertiesAndMethods;\nexport type RenderModalCtx = RenderModalPropertiesAndMethods & SizingUtilities;\nexport type RenderAssetSourceCtx = RenderAssetSourcePropertiesAndMethods &\n  SizingUtilities;\nexport type RenderItemFormSidebarPanelCtx =\n  RenderSidebarPanelPropertiesAndMethods & SizingUtilities;\nexport type RenderItemFormSidebarCtx = RenderSidebarPropertiesAndMethods &\n  SizingUtilities;\nexport type RenderItemFormOutletCtx = RenderItemFormOutletPropertiesAndMethods &\n  SizingUtilities;\nexport type RenderFieldExtensionCtx = RenderFieldExtensionPropertiesAndMethods &\n  SizingUtilities;\nexport type RenderManualFieldExtensionConfigScreenCtx =\n  RenderManualFieldExtensionConfigScreenPropertiesAndMethods & SizingUtilities;\nexport type RenderConfigScreenCtx = RenderConfigScreenPropertiesAndMethods &\n  SizingUtilities;\n\ntype MaybePromise<T> = T | Promise<T>;\n\n/** The full options you can pass to the `connect` function */\nexport type FullConnectParameters = {\n  /**\n   * This function will be called once at boot time and can be used to perform\n   * ie. some initial integrity checks on the configuration.\n   *\n   * @tag boot\n   */\n  onBoot: (ctx: OnBootCtx) => void;\n\n  /**\n   * This function will be called before destroying records. You can stop the\n   * action by returning `false`\n   *\n   * @tag beforeHooks\n   */\n  onBeforeItemsDestroy: (\n    items: Item[],\n    ctx: OnBootCtx,\n  ) => MaybePromise<boolean>;\n\n  /**\n   * This function will be called before publishing records. You can stop the\n   * action by returning `false`\n   *\n   * @tag beforeHooks\n   */\n  onBeforeItemsPublish: (\n    items: Item[],\n    ctx: OnBootCtx,\n  ) => MaybePromise<boolean>;\n\n  /**\n   * This function will be called before unpublishing records. You can stop the\n   * action by returning `false`\n   *\n   * @tag beforeHooks\n   */\n  onBeforeItemsUnpublish: (\n    items: Item[],\n    ctx: OnBootCtx,\n  ) => MaybePromise<boolean>;\n\n  /**\n   * This function will be called before saving a new version of a record. You\n   * can stop the action by returning `false`\n   *\n   * @tag beforeHooks\n   */\n  onBeforeItemUpsert: (\n    createOrUpdateItemPayload: ItemUpdateSchema | ItemCreateSchema,\n    ctx: OnBootCtx,\n  ) => MaybePromise<boolean>;\n\n  /**\n   * Use this function to customize the presentation of a record in records\n   * collections and \"Single link\" or \"Multiple links\" field\n   *\n   * @tag presentation\n   */\n  buildItemPresentationInfo: (\n    item: Item,\n    ctx: OnBootCtx,\n  ) => MaybePromise<ItemPresentationInfo | undefined>;\n\n  /**\n   * Use this function to customize the initial filters when opening an record\n   * selector via a \"Single link\" or \"Multiple links\" field\n   *\n   * @tag locationQuery\n   */\n  initialLocationQueryForItemSelector: (\n    openerfield: Item,\n    itemType: ItemType,\n    ctx: OnBootCtx,\n  ) => MaybePromise<InitialLocationQueryForItemSelector | undefined>;\n\n  /**\n   * Use this function to declare new tabs you want to add in the top-bar of the\n   * UI\n   *\n   * @tag pages\n   */\n  mainNavigationTabs: (ctx: IntentCtx) => MainNavigationTab[];\n  /**\n   * Use this function to declare new navigation sections in the Settings Area\n   * sidebar\n   *\n   * @tag pages\n   */\n  settingsAreaSidebarItemGroups: (\n    ctx: IntentCtx,\n  ) => SettingsAreaSidebarItemGroup[];\n  /**\n   * Use this function to declare new navigation items in the Content Area\n   * sidebar\n   *\n   * @tag pages\n   */\n  contentAreaSidebarItems: (ctx: IntentCtx) => ContentAreaSidebarItem[];\n  /**\n   * Use this function to declare new field extensions that users will be able\n   * to install manually in some field\n   *\n   * @tag manualFieldExtensions\n   */\n  manualFieldExtensions: (ctx: IntentCtx) => ManualFieldExtension[];\n  /**\n   * Use this function to declare additional sources to be shown when users want\n   * to upload new assets\n   *\n   * @tag assetSources\n   */\n  assetSources: (ctx: IntentCtx) => AssetSource[] | undefined;\n  /**\n   * Use this function to declare new sidebar panels to be shown when the user\n   * edits records of a particular model\n   *\n   * @tag sidebarPanels\n   */\n  itemFormSidebarPanels: (\n    itemType: ItemType,\n    ctx: IntentCtx,\n  ) => ItemFormSidebarPanel[];\n\n  /**\n   * Use this function to declare new sidebar to be shown when the user edits\n   * records of a particular model\n   *\n   * @tag sidebarPanels\n   */\n  itemFormSidebars: (itemType: ItemType, ctx: IntentCtx) => ItemFormSidebar[];\n\n  /**\n   * Use this function to declare custom outlets to be shown at the top of the\n   * record's editing page\n   *\n   * @tag itemFormOutlets\n   */\n  itemFormOutlets: (itemType: ItemType, ctx: IntentCtx) => ItemFormOutlet[];\n\n  /**\n   * Use this function to automatically force one or more field extensions to a\n   * particular field\n   *\n   * @tag forcedFieldExtensions\n   */\n  overrideFieldExtensions: (\n    field: Field,\n    ctx: FieldIntentCtx,\n  ) => FieldExtensionOverride | undefined;\n\n  /**\n   * Use this function to define a number of custom marks for a specific\n   * Structured Text field\n   *\n   * @tag structuredText\n   */\n  customMarksForStructuredTextField: (\n    field: Field,\n    ctx: FieldIntentCtx,\n  ) => StructuredTextCustomMark[] | undefined;\n\n  /**\n   * Use this function to define a number of custom block styles for a specific\n   * Structured Text field\n   *\n   * @tag structuredText\n   */\n  customBlockStylesForStructuredTextField: (\n    field: Field,\n    ctx: FieldIntentCtx,\n  ) => StructuredTextCustomBlockStyle[] | undefined;\n\n  /**\n   * This function will be called when the plugin needs to render the plugin's\n   * configuration form\n   *\n   * @tag configScreen\n   */\n  renderConfigScreen: (ctx: RenderConfigScreenCtx) => void;\n  /**\n   * This function will be called when the plugin needs to render a specific\n   * page (see the `mainNavigationTabs`, `settingsAreaSidebarItemGroups` and\n   * `contentAreaSidebarItems` functions)\n   *\n   * @tag pages\n   */\n  renderPage: (pageId: string, ctx: RenderPageCtx) => void;\n  /**\n   * This function will be called when the plugin requested to open a modal (see\n   * the `openModal` function)\n   *\n   * @tag modals\n   */\n  renderModal: (modalId: string, ctx: RenderModalCtx) => void;\n  /**\n   * This function will be called when the plugin needs to render a sidebar\n   * panel (see the `itemFormSidebarPanels` function)\n   *\n   * @tag sidebarPanels\n   */\n  renderItemFormSidebarPanel: (\n    sidebarPaneId: string,\n    ctx: RenderItemFormSidebarPanelCtx,\n  ) => void;\n  /**\n   * This function will be called when the plugin needs to render a sidebar (see\n   * the `itemFormSidebars` function)\n   *\n   * @tag sidebarPanels\n   */\n  renderItemFormSidebar: (\n    sidebarId: string,\n    ctx: RenderItemFormSidebarCtx,\n  ) => void;\n  /**\n   * This function will be called when the plugin needs to render an outlet (see\n   * the `itemFormOutlets` function)\n   *\n   * @tag itemFormOutlets\n   */\n  renderItemFormOutlet: (\n    itemFormOutletId: string,\n    ctx: RenderItemFormOutletCtx,\n  ) => void;\n  /**\n   * This function will be called when the user selects one of the plugin's\n   * asset sources to upload a new media file.\n   *\n   * @tag assetSources\n   */\n  renderAssetSource: (assetSourceId: string, ctx: RenderAssetSourceCtx) => void;\n  /**\n   * This function will be called when the plugin needs to render a field\n   * extension (see the `manualFieldExtensions` and `overrideFieldExtensions`\n   * functions)\n   *\n   * @tag forcedFieldExtensions\n   */\n  renderFieldExtension: (\n    fieldExtensionId: string,\n    ctx: RenderFieldExtensionCtx,\n  ) => void;\n  /**\n   * This function will be called when the plugin needs to render the\n   * configuration form for installing a field extension inside a particular\n   * field\n   *\n   * @tag manualFieldExtensions\n   */\n  renderManualFieldExtensionConfigScreen: (\n    fieldExtensionId: string,\n    ctx: RenderManualFieldExtensionConfigScreenCtx,\n  ) => void;\n  /**\n   * This function will be called each time the configuration object changes. It\n   * must return an object containing possible validation errors\n   *\n   * @tag manualFieldExtensions\n   */\n  validateManualFieldExtensionParameters: (\n    fieldExtensionId: string,\n    parameters: Record<string, unknown>,\n  ) => Record<string, unknown> | Promise<Record<string, unknown>>;\n};\n\nfunction toMultifield<Result>(\n  fn: ((field: Field, ctx: FieldIntentCtx) => Result) | undefined,\n) {\n  return (\n    fields: Field[],\n    ctx: InitPropertiesAndMethods,\n  ): Record<string, Result> => {\n    if (!fn) {\n      return {};\n    }\n\n    const result: Record<string, Result> = {};\n\n    for (const field of fields) {\n      const itemType = ctx.itemTypes[\n        field.relationships.item_type.data.id\n      ] as ItemType;\n      result[field.id] = fn(field, { ...ctx, itemType });\n    }\n\n    return result;\n  };\n}\n\ntype AwaitedReturnType<T extends (...args: any) => any> = Awaited<\n  ReturnType<T>\n>;\n\nfunction getMaxScrollHeight() {\n  const elements = document.querySelectorAll('body *');\n  let maxVal = 0;\n  for (let i = 0; i < elements.length; i++) {\n    maxVal = Math.max(elements[i].getBoundingClientRect().bottom, maxVal);\n  }\n  return maxVal;\n}\n\nconst buildRenderUtils = (parent: { setHeight: (number: number) => void }) => {\n  let oldHeight: null | number = null;\n\n  const updateHeight = (height?: number) => {\n    const realHeight =\n      height === undefined\n        ? Math.max(\n            document.body.scrollHeight,\n            document.body.offsetHeight,\n            document.documentElement.getBoundingClientRect().height,\n            getMaxScrollHeight(),\n          )\n        : height;\n\n    if (realHeight !== oldHeight) {\n      parent.setHeight(realHeight);\n      oldHeight = realHeight;\n    }\n  };\n\n  let resizeObserver: ResizeObserver | null = null;\n  let mutationObserver: MutationObserver | null = null;\n  const onMutation = () => updateHeight();\n\n  const startAutoResizer = () => {\n    updateHeight();\n\n    if (!resizeObserver) {\n      resizeObserver = new ResizeObserver(onMutation);\n      resizeObserver.observe(document.documentElement);\n    }\n\n    if (!mutationObserver) {\n      mutationObserver = new MutationObserver(onMutation);\n\n      mutationObserver.observe(window.document.body, {\n        attributes: true,\n        childList: true,\n        subtree: true,\n        characterData: true,\n      });\n    }\n  };\n\n  const stopAutoResizer = () => {\n    if (resizeObserver) {\n      resizeObserver.disconnect();\n      resizeObserver = null;\n    }\n\n    if (mutationObserver) {\n      mutationObserver.disconnect();\n      mutationObserver = null;\n    }\n  };\n\n  return { updateHeight, startAutoResizer, stopAutoResizer };\n};\n\nexport async function connect(\n  configuration: Partial<FullConnectParameters> = {},\n): Promise<void> {\n  const {\n    assetSources,\n    mainNavigationTabs,\n    settingsAreaSidebarItemGroups,\n    contentAreaSidebarItems,\n    manualFieldExtensions,\n    itemFormSidebarPanels,\n    itemFormSidebars,\n    itemFormOutlets,\n  } = configuration;\n  let listener: ((newSettings: any) => void) | null = null;\n  let callMethodMergingBootCtxExecutor:\n    | ((\n        methodName: string,\n        methodArgs: unknown[],\n        extraCtx: Record<string, unknown>,\n      ) => void)\n    | null = null;\n\n  const penpalConnection = connectToParent({\n    methods: {\n      sdkVersion: () => '0.2.0',\n      implementedHooks: () =>\n        Object.fromEntries(\n          Object.entries(configuration).map(([key, value]) => {\n            if (typeof value === 'function') {\n              return [key, true];\n            }\n\n            return [key, value];\n          }),\n        ),\n      assetSources,\n      mainNavigationTabs,\n      settingsAreaSidebarItemGroups,\n      contentAreaSidebarItems,\n      manualFieldExtensions,\n      itemFormSidebarPanels,\n      itemFormSidebars,\n      itemFormOutlets,\n      overrideFieldExtensions: toMultifield(\n        configuration.overrideFieldExtensions,\n      ),\n      customMarksForStructuredTextField: toMultifield(\n        configuration.customMarksForStructuredTextField,\n      ),\n      customBlockStylesForStructuredTextField: toMultifield(\n        configuration.customBlockStylesForStructuredTextField,\n      ),\n      onChange(newSettings: unknown) {\n        if (listener) {\n          listener(newSettings);\n        }\n      },\n      callMethodMergingBootCtx(\n        methodName: string,\n        methodArgs: unknown[],\n        extraCtx: Record<string, unknown>,\n      ) {\n        if (!callMethodMergingBootCtxExecutor) {\n          return null;\n        }\n        return callMethodMergingBootCtxExecutor(\n          methodName,\n          methodArgs,\n          extraCtx,\n        );\n      },\n    },\n  });\n\n  const parent: Parent = await penpalConnection.promise;\n  const initialSettings = await parent.getSettings();\n\n  if (isOnBootParent(parent, initialSettings)) {\n    type Settings = AwaitedReturnType<OnBootMethods['getSettings']>;\n    let currentSettings = initialSettings as Settings;\n\n    listener = (newSettings: Settings) => {\n      currentSettings = newSettings;\n    };\n\n    callMethodMergingBootCtxExecutor = (\n      methodName: string,\n      methodArgs: unknown[],\n      extraCtx: Record<string, unknown>,\n    ) => {\n      if (!(methodName in configuration)) {\n        return undefined;\n      }\n\n      return (configuration as any)[methodName](...methodArgs, {\n        ...parent,\n        ...currentSettings,\n        ...extraCtx,\n      });\n    };\n\n    if (configuration.onBoot) {\n      configuration.onBoot({\n        ...parent,\n        ...currentSettings,\n      });\n    }\n  }\n\n  if (isRenderPageParent(parent, initialSettings)) {\n    type Settings = AwaitedReturnType<RenderPageMethods['getSettings']>;\n\n    const render = (settings: Settings) => {\n      if (!configuration.renderPage) {\n        return;\n      }\n\n      configuration.renderPage(settings.pageId, {\n        ...parent,\n        ...settings,\n      });\n    };\n\n    listener = render;\n    render(initialSettings as Settings);\n  }\n\n  if (isRenderConfigScreenParent(parent, initialSettings)) {\n    type Settings = AwaitedReturnType<RenderConfigScreenMethods['getSettings']>;\n\n    const renderUtils = buildRenderUtils(parent);\n\n    const render = (settings: Settings) => {\n      if (!configuration.renderConfigScreen) {\n        return;\n      }\n\n      configuration.renderConfigScreen({\n        ...parent,\n        ...settings,\n        ...renderUtils,\n      });\n    };\n\n    listener = render;\n    render(initialSettings as Settings);\n  }\n\n  if (isRenderModalParent(parent, initialSettings)) {\n    type Settings = AwaitedReturnType<RenderModalMethods['getSettings']>;\n\n    const renderUtils = buildRenderUtils(parent);\n\n    const render = (settings: Settings) => {\n      if (!configuration.renderModal) {\n        return;\n      }\n\n      configuration.renderModal(settings.modalId, {\n        ...parent,\n        ...settings,\n        ...renderUtils,\n      });\n    };\n\n    listener = render;\n    render(initialSettings as Settings);\n  }\n\n  if (isRenderAssetSourceParent(parent, initialSettings)) {\n    type Settings = AwaitedReturnType<RenderAssetSourceMethods['getSettings']>;\n\n    const renderUtils = buildRenderUtils(parent);\n\n    const render = (settings: Settings) => {\n      if (!configuration.renderAssetSource) {\n        return;\n      }\n\n      configuration.renderAssetSource(settings.assetSourceId, {\n        ...parent,\n        ...settings,\n        ...renderUtils,\n      });\n    };\n\n    listener = render;\n    render(initialSettings as Settings);\n  }\n\n  if (isRenderSidebarPanelParent(parent, initialSettings)) {\n    type Settings = AwaitedReturnType<RenderSidebarPanelMethods['getSettings']>;\n\n    const renderUtils = buildRenderUtils(parent);\n\n    const render = (settings: Settings) => {\n      if (!configuration.renderItemFormSidebarPanel) {\n        return;\n      }\n\n      configuration.renderItemFormSidebarPanel(settings.sidebarPaneId, {\n        ...parent,\n        ...settings,\n        ...renderUtils,\n      });\n    };\n\n    listener = render;\n    render(initialSettings as Settings);\n  }\n\n  if (isRenderSidebarParent(parent, initialSettings)) {\n    type Settings = AwaitedReturnType<RenderSidebarMethods['getSettings']>;\n\n    const renderUtils = buildRenderUtils(parent);\n\n    const render = (settings: Settings) => {\n      if (!configuration.renderItemFormSidebar) {\n        return;\n      }\n\n      configuration.renderItemFormSidebar(settings.sidebarId, {\n        ...parent,\n        ...settings,\n        ...renderUtils,\n      });\n    };\n\n    listener = render;\n    render(initialSettings as Settings);\n  }\n\n  if (isRenderItemFormOutletParent(parent, initialSettings)) {\n    type Settings = AwaitedReturnType<\n      RenderItemFormOutletMethods['getSettings']\n    >;\n\n    const renderUtils = buildRenderUtils(parent);\n\n    const render = (settings: Settings) => {\n      if (!configuration.renderItemFormOutlet) {\n        return;\n      }\n\n      configuration.renderItemFormOutlet(settings.itemFormOutletId, {\n        ...parent,\n        ...settings,\n        ...renderUtils,\n      });\n    };\n\n    listener = render;\n    render(initialSettings as Settings);\n  }\n\n  if (isRenderFieldExtensionParent(parent, initialSettings)) {\n    type Settings = AwaitedReturnType<\n      RenderFieldExtensionMethods['getSettings']\n    >;\n\n    const renderUtils = buildRenderUtils(parent);\n\n    const render = (settings: Settings) => {\n      if (!configuration.renderFieldExtension) {\n        return;\n      }\n\n      configuration.renderFieldExtension(settings.fieldExtensionId, {\n        ...parent,\n        ...settings,\n        ...renderUtils,\n      });\n    };\n\n    listener = render;\n    render(initialSettings as Settings);\n  }\n\n  if (isRenderManualFieldExtensionConfigScreenParent(parent, initialSettings)) {\n    type Settings = AwaitedReturnType<\n      RenderManualFieldExtensionConfigScreenMethods['getSettings']\n    >;\n\n    const renderUtils = buildRenderUtils(parent);\n\n    const render = (settings: Settings) => {\n      if (!configuration.renderManualFieldExtensionConfigScreen) {\n        return;\n      }\n\n      configuration.renderManualFieldExtensionConfigScreen(\n        settings.fieldExtensionId,\n        {\n          ...parent,\n          ...settings,\n          ...renderUtils,\n        },\n      );\n    };\n\n    listener = render;\n    render(initialSettings as Settings);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}