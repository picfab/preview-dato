{"ast":null,"code":"import React from 'react';\nimport { useCallback, useState } from 'react';\nimport { useClickOutside } from '../useClickOutside';\nimport { DropdownContext } from './DropdownContext';\nimport s from './styles.module.css.json';\n/**\n * @example Basic example\n *\n * ```js\n * <Canvas ctx={ctx}>\n *   <Dropdown\n *     renderTrigger={({ open, onClick }) => (\n *       <Button\n *         onClick={onClick}\n *         rightIcon={open ? <CaretUpIcon /> : <CaretDownIcon />}\n *       >\n *         Options\n *       </Button>\n *     )}\n *   >\n *     <DropdownMenu>\n *       <DropdownOption onClick={() => {}}>Edit</DropdownOption>\n *       <DropdownOption disabled onClick={() => {}}>\n *         Duplicate\n *       </DropdownOption>\n *       <DropdownSeparator />\n *       <DropdownOption red onClick={() => {}}>\n *         Delete\n *       </DropdownOption>\n *     </DropdownMenu>\n *   </Dropdown>\n * </Canvas>;\n * ```\n *\n * @example Option actions\n *\n * ```js\n * <Canvas ctx={ctx}>\n *   <Dropdown\n *     renderTrigger={({ open, onClick }) => (\n *       <Button\n *         onClick={onClick}\n *         rightIcon={open ? <CaretUpIcon /> : <CaretDownIcon />}\n *       >\n *         Fields\n *       </Button>\n *     )}\n *   >\n *     <DropdownMenu>\n *       <DropdownOption>\n *         First option\n *         <DropdownOptionAction icon={<PlusIcon />} onClick={() => {}} />\n *         <DropdownOptionAction\n *           red\n *           icon={<TrashIcon />}\n *           onClick={() => {}}\n *         />\n *       </DropdownOption>\n *       <DropdownOption>\n *         Second option\n *         <DropdownOptionAction icon={<PlusIcon />} onClick={() => {}} />\n *         <DropdownOptionAction\n *           red\n *           icon={<TrashIcon />}\n *           onClick={() => {}}\n *         />\n *       </DropdownOption>\n *     </DropdownMenu>\n *   </Dropdown>\n * </Canvas>;\n * ```\n *\n * @example Option groups\n *\n * ```js\n * <Canvas ctx={ctx}>\n *   <Dropdown\n *     renderTrigger={({ open, onClick }) => (\n *       <Button\n *         onClick={onClick}\n *         rightIcon={open ? <CaretUpIcon /> : <CaretDownIcon />}\n *       >\n *         Fields\n *       </Button>\n *     )}\n *   >\n *     <DropdownMenu>\n *       <DropdownGroup name=\"Group 1\">\n *         <DropdownOption>Foo</DropdownOption>\n *         <DropdownOption>Bar</DropdownOption>\n *         <DropdownOption>Qux</DropdownOption>\n *       </DropdownGroup>\n *       <DropdownGroup name=\"Group 2\">\n *         <DropdownOption>Foo</DropdownOption>\n *         <DropdownOption>Bar</DropdownOption>\n *         <DropdownOption>Qux</DropdownOption>\n *       </DropdownGroup>\n *       <DropdownGroup name=\"Group 3\">\n *         <DropdownOption>Foo</DropdownOption>\n *         <DropdownOption>Bar</DropdownOption>\n *         <DropdownOption>Qux</DropdownOption>\n *       </DropdownGroup>\n *     </DropdownMenu>\n *   </Dropdown>\n * </Canvas>;\n * ```\n */\nexport function Dropdown(_a) {\n  var renderTrigger = _a.renderTrigger,\n    children = _a.children;\n  var _b = useState(false),\n    isOpen = _b[0],\n    setOpen = _b[1];\n  var handleClickOutside = useCallback(function (event) {\n    if (!event.target.closest(\".\".concat(s.Dropdown__menu)) && isOpen) {\n      setOpen(false);\n    }\n  }, [setOpen, isOpen]);\n  var outsideRef = useClickOutside(handleClickOutside);\n  var handleClose = useCallback(function () {\n    setOpen(false);\n  }, [setOpen]);\n  var handleToggle = useCallback(function () {\n    setOpen(function (open) {\n      return !open;\n    });\n  }, [setOpen]);\n  return React.createElement(DropdownContext.Provider, {\n    value: {\n      closeMenu: handleClose\n    }\n  }, React.createElement(\"div\", {\n    className: s.Dropdown,\n    ref: outsideRef\n  }, renderTrigger({\n    open: isOpen,\n    onClick: handleToggle\n  }), isOpen && children));\n}","map":{"version":3,"names":["React","useCallback","useState","useClickOutside","DropdownContext","s","Dropdown","_a","renderTrigger","children","_b","isOpen","setOpen","handleClickOutside","event","target","closest","concat","Dropdown__menu","outsideRef","handleClose","handleToggle","open","createElement","Provider","value","closeMenu","className","ref","onClick"],"sources":["/Users/fabienpicard/Projects/astro-website/node_modules/datocms-react-ui/src/Dropdown/Dropdown.tsx"],"sourcesContent":["import React from 'react';\nimport { useCallback, useState } from 'react';\nimport { useClickOutside } from '../useClickOutside';\nimport { DropdownContext } from './DropdownContext';\nimport s from './styles.module.css.json';\n\ntype RenderTriggerCtx = {\n  open: boolean;\n  onClick: () => void;\n};\n\nexport type DropdownProps = {\n  renderTrigger: (ctx: RenderTriggerCtx) => JSX.Element;\n  children: React.ReactNode;\n};\n\n/**\n * @example Basic example\n *\n * ```js\n * <Canvas ctx={ctx}>\n *   <Dropdown\n *     renderTrigger={({ open, onClick }) => (\n *       <Button\n *         onClick={onClick}\n *         rightIcon={open ? <CaretUpIcon /> : <CaretDownIcon />}\n *       >\n *         Options\n *       </Button>\n *     )}\n *   >\n *     <DropdownMenu>\n *       <DropdownOption onClick={() => {}}>Edit</DropdownOption>\n *       <DropdownOption disabled onClick={() => {}}>\n *         Duplicate\n *       </DropdownOption>\n *       <DropdownSeparator />\n *       <DropdownOption red onClick={() => {}}>\n *         Delete\n *       </DropdownOption>\n *     </DropdownMenu>\n *   </Dropdown>\n * </Canvas>;\n * ```\n *\n * @example Option actions\n *\n * ```js\n * <Canvas ctx={ctx}>\n *   <Dropdown\n *     renderTrigger={({ open, onClick }) => (\n *       <Button\n *         onClick={onClick}\n *         rightIcon={open ? <CaretUpIcon /> : <CaretDownIcon />}\n *       >\n *         Fields\n *       </Button>\n *     )}\n *   >\n *     <DropdownMenu>\n *       <DropdownOption>\n *         First option\n *         <DropdownOptionAction icon={<PlusIcon />} onClick={() => {}} />\n *         <DropdownOptionAction\n *           red\n *           icon={<TrashIcon />}\n *           onClick={() => {}}\n *         />\n *       </DropdownOption>\n *       <DropdownOption>\n *         Second option\n *         <DropdownOptionAction icon={<PlusIcon />} onClick={() => {}} />\n *         <DropdownOptionAction\n *           red\n *           icon={<TrashIcon />}\n *           onClick={() => {}}\n *         />\n *       </DropdownOption>\n *     </DropdownMenu>\n *   </Dropdown>\n * </Canvas>;\n * ```\n *\n * @example Option groups\n *\n * ```js\n * <Canvas ctx={ctx}>\n *   <Dropdown\n *     renderTrigger={({ open, onClick }) => (\n *       <Button\n *         onClick={onClick}\n *         rightIcon={open ? <CaretUpIcon /> : <CaretDownIcon />}\n *       >\n *         Fields\n *       </Button>\n *     )}\n *   >\n *     <DropdownMenu>\n *       <DropdownGroup name=\"Group 1\">\n *         <DropdownOption>Foo</DropdownOption>\n *         <DropdownOption>Bar</DropdownOption>\n *         <DropdownOption>Qux</DropdownOption>\n *       </DropdownGroup>\n *       <DropdownGroup name=\"Group 2\">\n *         <DropdownOption>Foo</DropdownOption>\n *         <DropdownOption>Bar</DropdownOption>\n *         <DropdownOption>Qux</DropdownOption>\n *       </DropdownGroup>\n *       <DropdownGroup name=\"Group 3\">\n *         <DropdownOption>Foo</DropdownOption>\n *         <DropdownOption>Bar</DropdownOption>\n *         <DropdownOption>Qux</DropdownOption>\n *       </DropdownGroup>\n *     </DropdownMenu>\n *   </Dropdown>\n * </Canvas>;\n * ```\n */\nexport function Dropdown({\n  renderTrigger,\n  children,\n}: DropdownProps): JSX.Element {\n  const [isOpen, setOpen] = useState(false);\n\n  const handleClickOutside = useCallback(\n    (event) => {\n      if (!event.target.closest(`.${s.Dropdown__menu}`) && isOpen) {\n        setOpen(false);\n      }\n    },\n    [setOpen, isOpen],\n  );\n\n  const outsideRef = useClickOutside<HTMLDivElement>(handleClickOutside);\n\n  const handleClose = useCallback(() => {\n    setOpen(false);\n  }, [setOpen]);\n\n  const handleToggle = useCallback(() => {\n    setOpen((open) => !open);\n  }, [setOpen]);\n\n  return (\n    <DropdownContext.Provider value={{ closeMenu: handleClose }}>\n      <div className={s.Dropdown} ref={outsideRef}>\n        {renderTrigger({ open: isOpen, onClick: handleToggle })}\n        {isOpen && children}\n      </div>\n    </DropdownContext.Provider>\n  );\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AAC7C,SAASC,eAAe,QAAQ,oBAAoB;AACpD,SAASC,eAAe,QAAQ,mBAAmB;AACnD,OAAOC,CAAC,MAAM,0BAA0B;AAYxC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsGA,OAAM,SAAUC,QAAQA,CAACC,EAGT;MAFdC,aAAa,GAAAD,EAAA,CAAAC,aAAA;IACbC,QAAQ,GAAAF,EAAA,CAAAE,QAAA;EAEF,IAAAC,EAAA,GAAoBR,QAAQ,CAAC,KAAK,CAAC;IAAlCS,MAAM,GAAAD,EAAA;IAAEE,OAAO,GAAAF,EAAA,GAAmB;EAEzC,IAAMG,kBAAkB,GAAGZ,WAAW,CACpC,UAACa,KAAK;IACJ,IAAI,CAACA,KAAK,CAACC,MAAM,CAACC,OAAO,CAAC,IAAAC,MAAA,CAAIZ,CAAC,CAACa,cAAc,CAAE,CAAC,IAAIP,MAAM,EAAE;MAC3DC,OAAO,CAAC,KAAK,CAAC;;EAElB,CAAC,EACD,CAACA,OAAO,EAAED,MAAM,CAAC,CAClB;EAED,IAAMQ,UAAU,GAAGhB,eAAe,CAAiBU,kBAAkB,CAAC;EAEtE,IAAMO,WAAW,GAAGnB,WAAW,CAAC;IAC9BW,OAAO,CAAC,KAAK,CAAC;EAChB,CAAC,EAAE,CAACA,OAAO,CAAC,CAAC;EAEb,IAAMS,YAAY,GAAGpB,WAAW,CAAC;IAC/BW,OAAO,CAAC,UAACU,IAAI;MAAK,QAACA,IAAI;IAAL,CAAK,CAAC;EAC1B,CAAC,EAAE,CAACV,OAAO,CAAC,CAAC;EAEb,OACEZ,KAAA,CAAAuB,aAAA,CAACnB,eAAe,CAACoB,QAAQ;IAACC,KAAK,EAAE;MAAEC,SAAS,EAAEN;IAAW;EAAE,GACzDpB,KAAA,CAAAuB,aAAA;IAAKI,SAAS,EAAEtB,CAAC,CAACC,QAAQ;IAAEsB,GAAG,EAAET;EAAU,GACxCX,aAAa,CAAC;IAAEc,IAAI,EAAEX,MAAM;IAAEkB,OAAO,EAAER;EAAY,CAAE,CAAC,EACtDV,MAAM,IAAIF,QAAQ,CACf,CACmB;AAE/B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}