{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport cn from 'classnames';\nimport React, { Children, useCallback } from 'react';\nimport styles from './styles.module.css.json';\n/**\n * @example Full example\n *\n * ```js\n * <Canvas ctx={ctx}>\n *   <Form onSubmit={() => console.log('onSubmit')}>\n *     <FieldGroup>\n *       <TextField\n *         required\n *         name=\"name\"\n *         id=\"name\"\n *         label=\"Name\"\n *         value=\"Mark Smith\"\n *         placeholder=\"Enter full name\"\n *         hint=\"Provide a full name\"\n *         onChange={(newValue) => console.log(newValue)}\n *       />\n *       <TextField\n *         required\n *         name=\"email\"\n *         id=\"email\"\n *         label=\"Email\"\n *         type=\"email\"\n *         value=\"\"\n *         placeholder=\"your@email.com\"\n *         error=\"Please enter an email!\"\n *         hint=\"Enter email address\"\n *         onChange={(newValue) => console.log(newValue)}\n *       />\n *       <TextField\n *         required\n *         name=\"apiToken\"\n *         id=\"apiToken\"\n *         label=\"API Token\"\n *         value=\"XXXYYY123\"\n *         hint=\"Enter a valid API token\"\n *         textInputProps={{ monospaced: true }}\n *         onChange={(newValue) => console.log(newValue)}\n *       />\n *       <TextareaField\n *         required\n *         name=\"longText\"\n *         id=\"longText\"\n *         label=\"Long text\"\n *         value=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit..\"\n *         hint=\"Enter some text\"\n *         onChange={(newValue) => console.log(newValue)}\n *       />\n *       <SelectField\n *         name=\"option\"\n *         id=\"option\"\n *         label=\"Option\"\n *         hint=\"Select one of the options\"\n *         value={{ label: 'Option 1', value: 'option1' }}\n *         selectInputProps={{\n *           options: [\n *             { label: 'Option 1', value: 'option1' },\n *             { label: 'Option 2', value: 'option2' },\n *             { label: 'Option 3', value: 'option3' },\n *           ],\n *         }}\n *         onChange={(newValue) => console.log(newValue)}\n *       />\n *       <SelectField\n *         name=\"multipleOption\"\n *         id=\"multipleOption\"\n *         label=\"Multiple options\"\n *         hint=\"Select one of the options\"\n *         value={[\n *           { label: 'Option 1', value: 'option1' },\n *           { label: 'Option 2', value: 'option2' },\n *         ]}\n *         selectInputProps={{\n *           isMulti: true,\n *           options: [\n *             { label: 'Option 1', value: 'option1' },\n *             { label: 'Option 2', value: 'option2' },\n *             { label: 'Option 3', value: 'option3' },\n *           ],\n *         }}\n *         onChange={(newValue) => console.log(newValue)}\n *       />\n *       <SwitchField\n *         name=\"debugMode\"\n *         id=\"debugMode\"\n *         label=\"Debug mode active?\"\n *         hint=\"Logs messages to console\"\n *         value={true}\n *         onChange={(newValue) => console.log(newValue)}\n *       />\n *     </FieldGroup>\n *     <FieldGroup>\n *       <Button fullWidth buttonType=\"primary\">\n *         Submit\n *       </Button>\n *     </FieldGroup>\n *   </Form>\n * </Canvas>;\n * ```\n */\nexport var Form = function (_a) {\n  var children = _a.children,\n    className = _a.className,\n    onSubmit = _a.onSubmit,\n    _b = _a.spacing,\n    spacing = _b === void 0 ? 'default' : _b,\n    otherProps = __rest(_a, [\"children\", \"className\", \"onSubmit\", \"spacing\"]);\n  var classNames = cn(styles.Form, className);\n  var formItemClassNames = cn(styles.Form__item, styles[\"Form__item--\".concat(spacing)]);\n  var handleSubmit = useCallback(function (event) {\n    event.preventDefault();\n    if (onSubmit) {\n      onSubmit(event);\n    }\n  }, [onSubmit]);\n  return React.createElement(\"form\", __assign({\n    className: classNames,\n    onSubmit: handleSubmit\n  }, otherProps), Children.map(children, function (child) {\n    if (child) {\n      return React.createElement(\"div\", {\n        className: formItemClassNames\n      }, child);\n    }\n    return null;\n  }));\n};","map":{"version":3,"names":["cn","React","Children","useCallback","styles","Form","_a","children","className","onSubmit","_b","spacing","otherProps","__rest","classNames","formItemClassNames","Form__item","concat","handleSubmit","event","preventDefault","createElement","__assign","map","child"],"sources":["/Users/fabienpicard/Projects/astro-website/node_modules/datocms-react-ui/src/Form/index.tsx"],"sourcesContent":["import cn from 'classnames';\nimport React, {\n  Children,\n  useCallback,\n  type CSSProperties,\n  type FormEventHandler,\n  type FormEvent,\n  type ReactNode,\n} from 'react';\nimport styles from './styles.module.css.json';\n\nexport interface FormProps {\n  onSubmit?: FormEventHandler;\n  spacing?: 'condensed' | 'default';\n  style?: CSSProperties;\n  className?: string;\n  children: ReactNode;\n}\n\n/**\n * @example Full example\n *\n * ```js\n * <Canvas ctx={ctx}>\n *   <Form onSubmit={() => console.log('onSubmit')}>\n *     <FieldGroup>\n *       <TextField\n *         required\n *         name=\"name\"\n *         id=\"name\"\n *         label=\"Name\"\n *         value=\"Mark Smith\"\n *         placeholder=\"Enter full name\"\n *         hint=\"Provide a full name\"\n *         onChange={(newValue) => console.log(newValue)}\n *       />\n *       <TextField\n *         required\n *         name=\"email\"\n *         id=\"email\"\n *         label=\"Email\"\n *         type=\"email\"\n *         value=\"\"\n *         placeholder=\"your@email.com\"\n *         error=\"Please enter an email!\"\n *         hint=\"Enter email address\"\n *         onChange={(newValue) => console.log(newValue)}\n *       />\n *       <TextField\n *         required\n *         name=\"apiToken\"\n *         id=\"apiToken\"\n *         label=\"API Token\"\n *         value=\"XXXYYY123\"\n *         hint=\"Enter a valid API token\"\n *         textInputProps={{ monospaced: true }}\n *         onChange={(newValue) => console.log(newValue)}\n *       />\n *       <TextareaField\n *         required\n *         name=\"longText\"\n *         id=\"longText\"\n *         label=\"Long text\"\n *         value=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit..\"\n *         hint=\"Enter some text\"\n *         onChange={(newValue) => console.log(newValue)}\n *       />\n *       <SelectField\n *         name=\"option\"\n *         id=\"option\"\n *         label=\"Option\"\n *         hint=\"Select one of the options\"\n *         value={{ label: 'Option 1', value: 'option1' }}\n *         selectInputProps={{\n *           options: [\n *             { label: 'Option 1', value: 'option1' },\n *             { label: 'Option 2', value: 'option2' },\n *             { label: 'Option 3', value: 'option3' },\n *           ],\n *         }}\n *         onChange={(newValue) => console.log(newValue)}\n *       />\n *       <SelectField\n *         name=\"multipleOption\"\n *         id=\"multipleOption\"\n *         label=\"Multiple options\"\n *         hint=\"Select one of the options\"\n *         value={[\n *           { label: 'Option 1', value: 'option1' },\n *           { label: 'Option 2', value: 'option2' },\n *         ]}\n *         selectInputProps={{\n *           isMulti: true,\n *           options: [\n *             { label: 'Option 1', value: 'option1' },\n *             { label: 'Option 2', value: 'option2' },\n *             { label: 'Option 3', value: 'option3' },\n *           ],\n *         }}\n *         onChange={(newValue) => console.log(newValue)}\n *       />\n *       <SwitchField\n *         name=\"debugMode\"\n *         id=\"debugMode\"\n *         label=\"Debug mode active?\"\n *         hint=\"Logs messages to console\"\n *         value={true}\n *         onChange={(newValue) => console.log(newValue)}\n *       />\n *     </FieldGroup>\n *     <FieldGroup>\n *       <Button fullWidth buttonType=\"primary\">\n *         Submit\n *       </Button>\n *     </FieldGroup>\n *   </Form>\n * </Canvas>;\n * ```\n */\nexport const Form = ({\n  children,\n  className,\n  onSubmit,\n  spacing = 'default',\n  ...otherProps\n}: FormProps): JSX.Element => {\n  const classNames = cn(styles.Form, className);\n\n  const formItemClassNames = cn(\n    styles.Form__item,\n    styles[`Form__item--${spacing}`],\n  );\n\n  const handleSubmit = useCallback(\n    (event: FormEvent) => {\n      event.preventDefault();\n      if (onSubmit) {\n        onSubmit(event);\n      }\n    },\n    [onSubmit],\n  );\n\n  return (\n    <form className={classNames} onSubmit={handleSubmit} {...otherProps}>\n      {Children.map(children, (child) => {\n        if (child) {\n          return <div className={formItemClassNames}>{child}</div>;\n        }\n        return null;\n      })}\n    </form>\n  );\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,EAAE,MAAM,YAAY;AAC3B,OAAOC,KAAK,IACVC,QAAQ,EACRC,WAAW,QAKN,OAAO;AACd,OAAOC,MAAM,MAAM,0BAA0B;AAU7C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoGA,OAAO,IAAMC,IAAI,GAAG,SAAAA,CAACC,EAMT;EALV,IAAAC,QAAQ,GAAAD,EAAA,CAAAC,QAAA;IACRC,SAAS,GAAAF,EAAA,CAAAE,SAAA;IACTC,QAAQ,GAAAH,EAAA,CAAAG,QAAA;IACRC,EAAA,GAAAJ,EAAA,CAAAK,OAAmB;IAAnBA,OAAO,GAAAD,EAAA,cAAG,SAAS,GAAAA,EAAA;IAChBE,UAAU,GAAAC,MAAA,CAAAP,EAAA,EALM,gDAMpB,CADc;EAEb,IAAMQ,UAAU,GAAGd,EAAE,CAACI,MAAM,CAACC,IAAI,EAAEG,SAAS,CAAC;EAE7C,IAAMO,kBAAkB,GAAGf,EAAE,CAC3BI,MAAM,CAACY,UAAU,EACjBZ,MAAM,CAAC,eAAAa,MAAA,CAAeN,OAAO,CAAE,CAAC,CACjC;EAED,IAAMO,YAAY,GAAGf,WAAW,CAC9B,UAACgB,KAAgB;IACfA,KAAK,CAACC,cAAc,EAAE;IACtB,IAAIX,QAAQ,EAAE;MACZA,QAAQ,CAACU,KAAK,CAAC;;EAEnB,CAAC,EACD,CAACV,QAAQ,CAAC,CACX;EAED,OACER,KAAA,CAAAoB,aAAA,SAAAC,QAAA;IAAMd,SAAS,EAAEM,UAAU;IAAEL,QAAQ,EAAES;EAAY,GAAMN,UAAU,GAChEV,QAAQ,CAACqB,GAAG,CAAChB,QAAQ,EAAE,UAACiB,KAAK;IAC5B,IAAIA,KAAK,EAAE;MACT,OAAOvB,KAAA,CAAAoB,aAAA;QAAKb,SAAS,EAAEO;MAAkB,GAAGS,KAAK,CAAO;;IAE1D,OAAO,IAAI;EACb,CAAC,CAAC,CACG;AAEX,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}