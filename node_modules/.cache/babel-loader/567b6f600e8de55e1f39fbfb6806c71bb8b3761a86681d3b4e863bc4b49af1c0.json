{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _constants = require(\"./constants\");\nvar _errorCodes = require(\"./errorCodes\");\nvar _generateId = _interopRequireDefault(require(\"./generateId\"));\nvar _errorSerialization = require(\"./errorSerialization\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * Augments an object with methods that match those defined by the remote. When these methods are\n * called, a \"call\" message will be sent to the remote, the remote's corresponding method will be\n * executed, and the method's return value will be returned via a message.\n * @param {Object} callSender Sender object that should be augmented with methods.\n * @param {Object} info Information about the local and remote windows.\n * @param {Array} methodNames Names of methods available to be called on the remote.\n * @param {Promise} destructionPromise A promise resolved when destroy() is called on the penpal\n * connection.\n * @returns {Object} The call sender object with methods that may be called.\n */\nvar _default = (callSender, info, methodNames, destroyConnection, log) => {\n  const localName = info.localName,\n    local = info.local,\n    remote = info.remote,\n    originForSending = info.originForSending,\n    originForReceiving = info.originForReceiving;\n  let destroyed = false;\n  log(\"\".concat(localName, \": Connecting call sender\"));\n  const createMethodProxy = methodName => {\n    return function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      log(\"\".concat(localName, \": Sending \").concat(methodName, \"() call\")); // This handles the case where the iframe has been removed from the DOM\n      // (and therefore its window closed), the consumer has not yet\n      // called destroy(), and the user calls a method exposed by\n      // the remote. We detect the iframe has been removed and force\n      // a destroy() immediately so that the consumer sees the error saying\n      // the connection has been destroyed. We wrap this check in a try catch\n      // because Edge throws an \"Object expected\" error when accessing\n      // contentWindow.closed on a contentWindow from an iframe that's been\n      // removed from the DOM.\n\n      let iframeRemoved;\n      try {\n        if (remote.closed) {\n          iframeRemoved = true;\n        }\n      } catch (e) {\n        iframeRemoved = true;\n      }\n      if (iframeRemoved) {\n        destroyConnection();\n      }\n      if (destroyed) {\n        const error = new Error(\"Unable to send \".concat(methodName, \"() call due \") + \"to destroyed connection\");\n        error.code = _errorCodes.ERR_CONNECTION_DESTROYED;\n        throw error;\n      }\n      return new Promise((resolve, reject) => {\n        const id = (0, _generateId.default)();\n        const handleMessageEvent = event => {\n          if (event.source !== remote || event.data.penpal !== _constants.REPLY || event.data.id !== id) {\n            return;\n          }\n          if (event.origin !== originForReceiving) {\n            log(\"\".concat(localName, \" received message from origin \").concat(event.origin, \" which did not match expected origin \").concat(originForReceiving));\n            return;\n          }\n          log(\"\".concat(localName, \": Received \").concat(methodName, \"() reply\"));\n          local.removeEventListener(_constants.MESSAGE, handleMessageEvent);\n          let returnValue = event.data.returnValue;\n          if (event.data.returnValueIsError) {\n            returnValue = (0, _errorSerialization.deserializeError)(returnValue);\n          }\n          (event.data.resolution === _constants.FULFILLED ? resolve : reject)(returnValue);\n        };\n        local.addEventListener(_constants.MESSAGE, handleMessageEvent);\n        remote.postMessage({\n          penpal: _constants.CALL,\n          id,\n          methodName,\n          args\n        }, originForSending);\n      });\n    };\n  };\n  methodNames.reduce((api, methodName) => {\n    api[methodName] = createMethodProxy(methodName);\n    return api;\n  }, callSender);\n  return () => {\n    destroyed = true;\n  };\n};\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_constants","require","_errorCodes","_generateId","_interopRequireDefault","_errorSerialization","obj","__esModule","_default","callSender","info","methodNames","destroyConnection","log","localName","local","remote","originForSending","originForReceiving","destroyed","concat","createMethodProxy","methodName","_len","arguments","length","args","Array","_key","iframeRemoved","closed","e","error","Error","code","ERR_CONNECTION_DESTROYED","Promise","resolve","reject","id","handleMessageEvent","event","source","data","penpal","REPLY","origin","removeEventListener","MESSAGE","returnValue","returnValueIsError","deserializeError","resolution","FULFILLED","addEventListener","postMessage","CALL","reduce","api","module"],"sources":["/Users/fabienpicard/Projects/astro-website/node_modules/penpal/lib/connectCallSender.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _constants = require(\"./constants\");\n\nvar _errorCodes = require(\"./errorCodes\");\n\nvar _generateId = _interopRequireDefault(require(\"./generateId\"));\n\nvar _errorSerialization = require(\"./errorSerialization\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Augments an object with methods that match those defined by the remote. When these methods are\n * called, a \"call\" message will be sent to the remote, the remote's corresponding method will be\n * executed, and the method's return value will be returned via a message.\n * @param {Object} callSender Sender object that should be augmented with methods.\n * @param {Object} info Information about the local and remote windows.\n * @param {Array} methodNames Names of methods available to be called on the remote.\n * @param {Promise} destructionPromise A promise resolved when destroy() is called on the penpal\n * connection.\n * @returns {Object} The call sender object with methods that may be called.\n */\nvar _default = (callSender, info, methodNames, destroyConnection, log) => {\n  const localName = info.localName,\n        local = info.local,\n        remote = info.remote,\n        originForSending = info.originForSending,\n        originForReceiving = info.originForReceiving;\n  let destroyed = false;\n  log(`${localName}: Connecting call sender`);\n\n  const createMethodProxy = methodName => {\n    return function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      log(`${localName}: Sending ${methodName}() call`); // This handles the case where the iframe has been removed from the DOM\n      // (and therefore its window closed), the consumer has not yet\n      // called destroy(), and the user calls a method exposed by\n      // the remote. We detect the iframe has been removed and force\n      // a destroy() immediately so that the consumer sees the error saying\n      // the connection has been destroyed. We wrap this check in a try catch\n      // because Edge throws an \"Object expected\" error when accessing\n      // contentWindow.closed on a contentWindow from an iframe that's been\n      // removed from the DOM.\n\n      let iframeRemoved;\n\n      try {\n        if (remote.closed) {\n          iframeRemoved = true;\n        }\n      } catch (e) {\n        iframeRemoved = true;\n      }\n\n      if (iframeRemoved) {\n        destroyConnection();\n      }\n\n      if (destroyed) {\n        const error = new Error(`Unable to send ${methodName}() call due ` + `to destroyed connection`);\n        error.code = _errorCodes.ERR_CONNECTION_DESTROYED;\n        throw error;\n      }\n\n      return new Promise((resolve, reject) => {\n        const id = (0, _generateId.default)();\n\n        const handleMessageEvent = event => {\n          if (event.source !== remote || event.data.penpal !== _constants.REPLY || event.data.id !== id) {\n            return;\n          }\n\n          if (event.origin !== originForReceiving) {\n            log(`${localName} received message from origin ${event.origin} which did not match expected origin ${originForReceiving}`);\n            return;\n          }\n\n          log(`${localName}: Received ${methodName}() reply`);\n          local.removeEventListener(_constants.MESSAGE, handleMessageEvent);\n          let returnValue = event.data.returnValue;\n\n          if (event.data.returnValueIsError) {\n            returnValue = (0, _errorSerialization.deserializeError)(returnValue);\n          }\n\n          (event.data.resolution === _constants.FULFILLED ? resolve : reject)(returnValue);\n        };\n\n        local.addEventListener(_constants.MESSAGE, handleMessageEvent);\n        remote.postMessage({\n          penpal: _constants.CALL,\n          id,\n          methodName,\n          args\n        }, originForSending);\n      });\n    };\n  };\n\n  methodNames.reduce((api, methodName) => {\n    api[methodName] = createMethodProxy(methodName);\n    return api;\n  }, callSender);\n  return () => {\n    destroyed = true;\n  };\n};\n\nexports.default = _default;\nmodule.exports = exports.default;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}